class Solution {
public:
    vector<int> findnextsmallerindex(vector<int>& arr, int n) {
        vector<int> ans(n, -1);
        stack<int> st;

        for (int i = n - 1; i >= 0; i--) {
            while (!st.empty() && arr[st.top()] >= arr[i]) {
                st.pop();
            }
            if (!st.empty()) ans[i] = st.top();
            st.push(i);
        }
        return ans;
    }

    vector<int> findprevioussmallerindex(vector<int>& arr, int n) {
        vector<int> ans(n, -1);
        stack<int> st;

        for (int i = 0; i < n; i++) {
            while (!st.empty() && arr[st.top()] >= arr[i]) {
                st.pop();
            }
            if (!st.empty()) ans[i] = st.top();
            st.push(i);
        }
        return ans;
    }

    int largestRectangleArea(vector<int>& heights) {
        int n = heights.size();
        vector<int> next = findnextsmallerindex(heights, n);
        vector<int> prev = findprevioussmallerindex(heights, n);

        int area = 0;
        for (int i = 0; i < n; i++) {
            int l = heights[i];
            if (next[i] == -1) next[i] = n;
            int b = next[i] - prev[i] - 1;
            int narea = l * b;
            area = max(area, narea);
        }
        return area;
    }

    int maximalRectangle(vector<vector<char>>& matrix) {
        int n = matrix.size();
        if (n == 0) return 0;
        int m = matrix[0].size();

        // histogram for heights
        vector<int> hist(m, 0);

        int maxArea = 0;

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (matrix[i][j] == '1')
                    hist[j] += 1;
                else
                    hist[j] = 0;
            }
            maxArea = max(maxArea, largestRectangleArea(hist));
        }

        return maxArea;
    }
};
