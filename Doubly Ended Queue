#include <bits/stdc++.h> 
using namespace std;

class Deque {
public:
    vector<int> arr;
    int front, rear, size;

    // Constructor
    Deque(int n) {
        size = n;
        arr.resize(size);
        front = rear = -1;
    }

    // Insert at front
    bool pushFront(int x) {
        if (isFull()) return false;

        if (front == -1) { // empty deque
            front = rear = 0;
        }
        else if (front == 0) { // wrap around
            front = size - 1;
        }
        else {
            front--;
        }

        arr[front] = x;
        return true;
    }

    // Insert at rear
    bool pushRear(int x) {
        if (isFull()) return false;

        if (front == -1) { // empty deque
            front = rear = 0;
        }
        else if (rear == size - 1) { // wrap around
            rear = 0;
        }
        else {
            rear++;
        }

        arr[rear] = x;
        return true;
    }

    // Delete from front
    int popFront() {
        if (isEmpty()) return -1;

        int val = arr[front]; // save the value

        if (front == rear) { // only one element
            front = rear = -1;
        }
        else if (front == size - 1) { // wrap around
            front = 0;
        }
        else {
            front++;
        }

        return val;
    }

    // Delete from rear
    int popRear() {
        if (isEmpty()) return -1;

        int val = arr[rear]; // save the value

        if (front == rear) { // only one element
            front = rear = -1;
        }
        else if (rear == 0) { // wrap around
            rear = size - 1;
        }
        else {
            rear--;
        }

        return val;
    }

    // Get front element
    int getFront() {
        if (isEmpty()) return -1;
        return arr[front];
    }

    // Get rear element
    int getRear() {
        if (isEmpty()) return -1;
        return arr[rear];
    }

    // Check empty
    bool isEmpty() {
        return (front == -1);
    }

    // Check full
    bool isFull() {
        return ((front == 0 && rear == size - 1) || (front == rear + 1));
    }
};
